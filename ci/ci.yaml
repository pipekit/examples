---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: examples-ci-
  namespace: ci
spec:
  entrypoint: workflow
  synchronization:
    semaphore:
      configMapKeyRef:
        name: workflows-semaphore
        key: examples-ci
  serviceAccountName: ci
  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes: ["ReadWriteMany"]
        storageClassName: nfs
        resources:
          requests:
            storage: 1Gi

  arguments:
    parameters:
      - name: gh_org
        value: "pipekit"
      - name: gh_repo
        value: "examples"
      - name: pk_url
        value: "https://pipekit.io"
  templates:
    - name: workflow
      dag:
        tasks:
          - name: clone-repo
            template: clone-repo
          - name: get-pr
            template: get-pr

          - name: trigger-hera
            template: trigger-hera
            depends: clone-repo && get-pr
          - name: notify-github-trigger-hera-start
            template: github-notifier
            arguments:
              parameters:
                - name: git_sha
                  value: "{{tasks.get-pr.outputs.parameters.sha}}"
                - name: state
                  value: "pending"
                - name: context
                  value: "Trigger Hera Pipes"
                - name: description
                  value: "In progress — This check has started..."
                - name: pipeUUID
                  value: "{{tasks.get-pr.outputs.parameters.pipeUUID}}"
                - name: runUUID
                  value: "{{tasks.get-pr.outputs.parameters.runUUID}}"
            depends: clone-repo && get-pr
          - name: notify-github-trigger-hera-success
            template: github-notifier
            arguments:
              parameters:
                - name: git_sha
                  value: "{{tasks.get-pr.outputs.parameters.sha}}"
                - name: state
                  value: "success"
                - name: context
                  value: "Trigger Hera Pipes"
                - name: description
                  value: "Passed"
                - name: pipeUUID
                  value: "{{tasks.get-pr.outputs.parameters.pipeUUID}}"
                - name: runUUID
                  value: "{{tasks.get-pr.outputs.parameters.runUUID}}"
            depends: trigger-hera.Succeeded && notify-github-trigger-hera-start
          - name: notify-github-trigger-hera-fail
            template: github-notifier
            arguments:
              parameters:
                - name: git_sha
                  value: "{{tasks.get-pr.outputs.parameters.sha}}"
                - name: state
                  value: "failure"
                - name: context
                  value: "Trigger Hera Pipes"
                - name: description
                  value: "Failed"
                - name: pipeUUID
                  value: "{{tasks.get-pr.outputs.parameters.pipeUUID}}"
                - name: runUUID
                  value: "{{tasks.get-pr.outputs.parameters.runUUID}}"
            depends: trigger-hera.Failed && notify-github-trigger-hera-start

          - name: lint-repo
            template: lint-repo
            arguments:
              parameters:
                - name: git_sha
                  value: "{{tasks.get-pr.outputs.parameters.sha}}"
                - name: pipeUUID
                  value: "{{tasks.get-pr.outputs.parameters.pipeUUID}}"
                - name: runUUID
                  value: "{{tasks.get-pr.outputs.parameters.runUUID}}"
            depends: clone-repo && get-pr
          - name: notify-github-lint-repo-start
            template: github-notifier
            arguments:
              parameters:
                - name: git_sha
                  value: "{{tasks.get-pr.outputs.parameters.sha}}"
                - name: state
                  value: "pending"
                - name: context
                  value: "Lint Repo"
                - name: description
                  value: "In progress — This check has started..."
                - name: pipeUUID
                  value: "{{tasks.get-pr.outputs.parameters.pipeUUID}}"
                - name: runUUID
                  value: "{{tasks.get-pr.outputs.parameters.runUUID}}"
            depends: clone-repo && get-pr
          - name: notify-github-lint-repo-success
            template: github-notifier
            arguments:
              parameters:
                - name: git_sha
                  value: "{{tasks.get-pr.outputs.parameters.sha}}"
                - name: state
                  value: "success"
                - name: context
                  value: "Lint Repo"
                - name: description
                  value: "Passed"
                - name: pipeUUID
                  value: "{{tasks.get-pr.outputs.parameters.pipeUUID}}"
                - name: runUUID
                  value: "{{tasks.get-pr.outputs.parameters.runUUID}}"
            depends: lint-repo.Succeeded && notify-github-lint-repo-start
          - name: notify-github-lint-repo-fail
            template: github-notifier
            arguments:
              parameters:
                - name: git_sha
                  value: "{{tasks.get-pr.outputs.parameters.sha}}"
                - name: state
                  value: "failure"
                - name: context
                  value: "Lint Repo"
                - name: description
                  value: "Failed"
                - name: pipeUUID
                  value: "{{tasks.get-pr.outputs.parameters.pipeUUID}}"
                - name: runUUID
                  value: "{{tasks.get-pr.outputs.parameters.runUUID}}"
            depends: lint-repo.Failed && notify-github-lint-repo-start

    - name: clone-repo
      nodeSelector:
        nodegroup: arm-spot
      container:
        image: pipekitdev/ci-alpine
        imagePullPolicy: Always
        command:
          - sh
          - -c
          - |
            mkdir -p /workdir/{{workflow.parameters.gh_org}} && cd /workdir/{{workflow.parameters.gh_org}} || exit 1
            git config --global --add safe.directory '*'
            git clone https://github.com/{{workflow.parameters.gh_org}}/{{workflow.parameters.gh_repo}}.git
            cd {{workflow.parameters.gh_repo}}
            git checkout $GIT_COMMIT
        volumeMounts:
          - name: workdir
            mountPath: /workdir
        resources:
          requests:
            memory: 1Gi
            cpu: 100m

    - name: lint-repo
      inputs:
        parameters:
          - name: git_sha
          - name: pipeUUID
          - name: runUUID
      metadata:
        annotations:
          vault.hashicorp.com/agent-inject: "true"
          vault.hashicorp.com/role: "argo"
          vault.hashicorp.com/auth-path: "auth/runner"
          vault.hashicorp.com/agent-pre-populate-only: "true"
          vault.hashicorp.com/agent-inject-secret-ci-token: "infrastructure/data/renovate"
          vault.hashicorp.com/agent-inject-template-ci-token: |
            {{ with secret "infrastructure/data/renovate" -}}
                export GITHUB_TOKEN="{{ .Data.data.github_PAT }}"
            {{- end }}
      container:
        image: oxsecurity/megalinter-python:v7
        env:
          - name: GITHUB_SHA
            value: "{{inputs.parameters.git_sha}}"
          - name: GITHUB_API_URL
            value: "https://api.github.com"
          - name: GITHUB_REPOSITORY
            value: "{{workflow.parameters.gh_org}}/{{workflow.parameters.gh_repo}}"
          - name: CI_ACTION_RUN_URL
            value: "{{workflow.parameters.pk_url}}/pipes/{{inputs.parameters.pipeUUID}}/runs/{{inputs.parameters.runUUID}}"
        command:
          - /bin/bash
          - -c
          - |
            echo "Retrieving git clone..." && cp -R /workdir/{{workflow.parameters.gh_org}}/{{workflow.parameters.gh_repo}} /tmp/lint
            . /vault/secrets/ci-token

            # Disable the PR comment reporter if this is not a PR
            if [ "${isPR}" == "true" ]
            then
              export GITHUB_COMMENT_REPORTER="true"
            else
              export GITHUB_COMMENT_REPORTER="false"
            fi

            ./entrypoint.sh
        volumeMounts:
          - name: workdir
            mountPath: /workdir
        resources:
          requests:
            memory: 1Gi
            cpu: 3

    - name: get-pr
      nodeSelector:
        nodegroup: arm-spot
      metadata:
        annotations:
          vault.hashicorp.com/agent-inject: "true"
          vault.hashicorp.com/role: "argo"
          vault.hashicorp.com/auth-path: "auth/runner"
          vault.hashicorp.com/agent-pre-populate-only: "true"
          vault.hashicorp.com/agent-inject-secret-ci-token: "infrastructure/data/renovate"
          vault.hashicorp.com/agent-inject-template-ci-token: |
            {{ with secret "infrastructure/data/renovate" -}}
                export GITHUB_TOKEN="{{ .Data.data.github_PAT }}"
            {{- end }}
      container:
        env:
          - name: RUN_UUID
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['workflows.pipekit.io/run_uuid']
          - name: PIPE_UUID
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['workflows.pipekit.io/pipe_uuid']
        image: pipekitdev/ci-alpine
        imagePullPolicy: Always
        command:
          - /bin/bash
          - -c
          - |
            if [ "${isPR}" == "true" ]
            then
              . /vault/secrets/ci-token
              curl \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              https://api.github.com/repos/{{workflow.parameters.gh_org}}/{{workflow.parameters.gh_repo}}/pulls \
              | jq '. | [map(.) | .[] | select(.head.sha|IN(env.GIT_COMMIT))| {number, sha: .head.sha, headref: .head.ref, base: .base.sha, baseref: .base.ref}]' > /tmp/pr
              cat /tmp/pr | jq -r '.[].number' > /tmp/pr_num
              cat /tmp/pr | jq -r '.[].sha' > /tmp/sha
            else
              echo '[ { "number": "0000", "sha": "0000", "headref": "0000", "base": "0000", "baseref": "0000" } ]' > /tmp/pr
              echo "master" > /tmp/pr_num
              echo "0000" > /tmp/sha
            fi

            echo $PIPE_UUID > /tmp/pipeUUID
            echo $RUN_UUID > /tmp/runUUID
      outputs:
        parameters:
          - name: pr
            valueFrom:
              path: /tmp/pr
          - name: pr_num
            valueFrom:
              path: /tmp/pr_num
          - name: sha
            valueFrom:
              path: /tmp/sha
          - name: pipeUUID
            valueFrom:
              path: /tmp/pipeUUID
          - name: runUUID
            valueFrom:
              path: /tmp/runUUID

    - name: github-notifier
      nodeSelector:
        nodegroup: arm-spot
      metadata:
        annotations:
          vault.hashicorp.com/agent-inject: "true"
          vault.hashicorp.com/role: "argo"
          vault.hashicorp.com/auth-path: "auth/runner"
          vault.hashicorp.com/agent-pre-populate-only: "true"
          vault.hashicorp.com/agent-inject-secret-ci-token: "infrastructure/data/renovate"
          vault.hashicorp.com/agent-inject-template-ci-token: |-
            {{ with secret "infrastructure/data/renovate" -}}
                {{ .Data.data.github_PAT }}
            {{- end }}
      inputs:
        parameters:
          - name: state
          - name: description
          - name: context
          - name: git_sha
          - name: pipeUUID
          - name: runUUID
      container:
        image: ghcr.io/crumbhole/ci-github-notifier:v1.4.6
        imagePullPolicy: Always
        command:
          - /go/bin/ci-github-notifier
        env:
          - name: state
            value: "{{inputs.parameters.state}}"
          - name: target_url
            value: "{{workflow.parameters.pk_url}}/pipes/{{inputs.parameters.pipeUUID}}/runs/{{inputs.parameters.runUUID}}"
          - name: description
            value: "{{inputs.parameters.description}}"
          - name: context
            value: "{{inputs.parameters.context}}"
          - name: tokenFile
            value: "/vault/secrets/ci-token"
          - name: organisation
            value: "{{workflow.parameters.gh_org}}"
          - name: app_repo
            value: "{{workflow.parameters.gh_repo}}"
          - name: git_sha
            value: "{{inputs.parameters.git_sha}}"
        resources:
          requests:
            memory: 64Mi
            cpu: 250m

    - name: trigger-hera
      nodeSelector:
        nodegroup: arm-spot
      metadata:
        annotations:
          vault.hashicorp.com/agent-inject: "true"
          vault.hashicorp.com/role: "argo"
          vault.hashicorp.com/auth-path: "auth/runner"
          vault.hashicorp.com/agent-pre-populate-only: "true"
          vault.hashicorp.com/agent-inject-secret-pk-user: "infrastructure/data/pipekit/ciuser"
          vault.hashicorp.com/agent-inject-template-pk-user: |
            {{ with secret "infrastructure/data/pipekit/ciuser" -}}
                export PIPEKIT_USERNAME="{{ .Data.data.username }}"
                export PIPEKIT_PASSWORD="{{ .Data.data.password }}"
            {{- end }}
      container:
        image: pipekitdev/ci-ubuntu
        command:
          - /bin/bash
          - -c
          - |
            apt-get update && apt-get install -y python3 python3-pip
            pip install pipekit-sdk --break-system-packages

            
            curl -LO https://github.com/pipekit/cli/releases/download/v3.8.2/cli_3.8.2_linux_arm64.deb
            dpkg -i cli_3.8.2_linux_arm64.deb
            source /vault/secrets/pk-user
            pipekit login
            export PIPEKIT_HERA_TOKEN=$(pipekit hera -r)

            echo "Triggering Hera Coinflip pipe..."
            cd /workdir/{{workflow.parameters.gh_org}}/{{workflow.parameters.gh_repo}}/examples/hera-coinflip || exit 1
            python3 workflow.py

            echo "Triggering Hera Versions pipe..."
            cd /workdir/{{workflow.parameters.gh_org}}/{{workflow.parameters.gh_repo}}/examples/get-versions || exit 1
            python3 workflow.py
        volumeMounts:
          - name: workdir
            mountPath: /workdir
        resources:
          requests:
            memory: 100Mi
            cpu: 200m
