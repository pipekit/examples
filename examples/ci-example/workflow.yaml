apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: ci-example-
  namespace: argo
spec:
  entrypoint: main
  serviceAccountName: argo-workflow
  arguments:
    parameters:
    - name: app_repo
      value: "argo-workflows-ci-example"
    - name: git_branch
      value: "main"
    - name: target_branch
      value: "main"
    - name: container_tag
      value: "stable"
    - name: container_image
      value: ""
    - name: dockerfile
      value: "Dockerfile"
    - name: path
      value: "/CI"
  templates:
    - name: main
      dag:
        tasks:
          - name: git-checkout-pr
            template: git-checkout-pr
          - name: lint-dockerfile
            template: lint-dockerfile
            arguments:
              artifacts:
                - name: git_repo
                  from: "{{tasks.git-checkout-pr.outputs.artifacts.git_repo}}"
            depends: git-checkout-pr
          - name: shellcheck
            template: shellcheck
            arguments:
              artifacts:
                - name: git_repo
                  from: "{{tasks.git-checkout-pr.outputs.artifacts.git_repo}}"
            depends: git-checkout-pr
          - name: html-modifier
            template: html-modifier
            arguments:
              artifacts:
                - name: git_repo
                  from: "{{tasks.git-checkout-pr.outputs.artifacts.git_repo}}"
            depends: git-checkout-pr
          - name: container-build
            template: container-build
            arguments:
              parameters:
                - name: tag
                  value: "stable"
              artifacts:
                - name: modified_git_repo
                  from: "{{tasks.html-modifier.outputs.artifacts.modified_git_repo}}"
            depends: (html-modifier && shellcheck && lint-dockerfile)

    - name: git-checkout-pr
      container:
        image: alpine:latest
        command:
          - sh
          - -c
          - |
            apk --update add git

            cd /tmp
            echo "Start Clone of source branch"
            git clone https://github.com/pipekit/{{workflow.parameters.app_repo}}.git
            cd {{workflow.parameters.app_repo}}

            ## These lines are a git hack just for the example.
            git config --global --add safe.directory /tmp/{{workflow.parameters.app_repo}}
            git config --global user.email "sales@pipekit.io"
            git config --global user.name "Pipekit Inc"

            git checkout {{workflow.parameters.git_branch}}

            echo "Merge in target branch"
            git merge origin/{{workflow.parameters.target_branch}}

            echo "Complete."
        resources:
          requests:
            memory: 250Mi
            cpu: 50m
          limits:
            memory: 250Mi
            cpu: 50m
      outputs:
        artifacts:
          - name: git_repo
            path: /tmp/{{workflow.parameters.app_repo}}
      #20 minutes
      activeDeadlineSeconds: 1200

    - name: lint-dockerfile
      inputs:
        artifacts:
          - name: git_repo
            path: /tmp/{{workflow.parameters.app_repo}}
      container:
        image: hadolint/hadolint:latest-alpine
        command:
          - sh
          - -c
          - |
            /bin/hadolint /tmp/{{workflow.parameters.app_repo}}/CI/Dockerfile -V
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 256Mi
            cpu: 100m
      outputs:
        artifacts:
          - name: modified_git_repo
            path: /tmp/{{workflow.parameters.app_repo}}
      #20 minutes
      activeDeadlineSeconds: 1200

    - name: shellcheck
      inputs:
        artifacts:
          - name: git_repo
            path: /tmp/{{workflow.parameters.app_repo}}
      container:
        image: koalaman/shellcheck-alpine
        command:
          - sh
          - -c
          - |
            shellcheck /tmp/{{workflow.parameters.app_repo}}/setup.sh
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 256Mi
            cpu: 100m
      outputs:
        artifacts:
          - name: modified_git_repo
            path: /tmp/{{workflow.parameters.app_repo}}
      #20 minutes
      activeDeadlineSeconds: 1200

    - name: html-modifier
      inputs:
        artifacts:
          - name: git_repo
            path: /tmp/{{workflow.parameters.app_repo}}
      container:
        image: ubuntu:latest
        command:
          - /bin/bash
          - -c
          - |
            cd /tmp/{{workflow.parameters.app_repo}}/CI

            if grep -q CHANGEMEPLEASE index.html; then
              cat index.html | sed -E 's/CHANGEMEPLEASE/{{workflow.name}} and it used minio for artifact passing./g' > tmp_index.html
              mv tmp_index.html index.html
            else
              echo "CHANGEMEPLEASE was not found in index.html. Exiting"
              exit 1
            fi

            cat index.html
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 256Mi
            cpu: 100m
      outputs:
        artifacts:
          - name: modified_git_repo
            path: /tmp/{{workflow.parameters.app_repo}}
      #20 minutes
      activeDeadlineSeconds: 1200

    - name: container-build
      inputs:
        artifacts:
          - name: modified_git_repo
            path: /container-build
      container:
        image: moby/buildkit:v0.12.2-rootless
        command:
          - sh
          - -c
          - |
            buildctl-daemonless.sh build \
            --frontend \
            dockerfile.v0 \
            --local \
            context=/container-build/{{workflow.parameters.path}} \
            --local \
            dockerfile=/container-build/{{workflow.parameters.path}} \
            --opt filename={{workflow.parameters.dockerfile}} \
            --output \
            type=image,name={{workflow.parameters.container_image}}:{{workflow.parameters.container_tag}},push=false,registry.insecure=true
        env:
          - name: BUILDKITD_FLAGS
            value: --oci-worker-no-process-sandbox
        securityContext:
          seccompProfile:
            type: Unconfined
          runAsUser: 1000
          runAsGroup: 1000
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            memory: 1Gi
            cpu: 1
      #20 minutes
      activeDeadlineSeconds: 1200
